{
    "title": "Design Patterns - O que são e quais os benefícios?",
    "author": "Opus Software",
    "body": "Design Patterns - O que s\u00e3o e quais os benef\u00edcios?\n\n* Home\n* A Opus Software\n* Solu\u00e7\u00f5es e Cases\n* Blog\n* Fale conosco\n* en\n* Menu\n\nDesign Patterns \u2013 O que s\u00e3o e quais os benef\u00edcios?\n\n26/09/2018/em Sem categoria /por lutti\n\nQuando desenvolvemos um software, \u00e9 natural encontrarmos desafios. Conforme adquirimos experi\u00eancia, percebemos que determinados problemas s\u00e3o recorrentes, mesmo em projetos diferentes. Automaticamente, nos lembramos de como solucionamos um desafio parecido anteriormente. \u00c9 quase como se houvesse um padr\u00e3o para solucionar certos tipos de problemas que encontramos. Esses padr\u00f5es s\u00e3o conhecidos como Design Patterns ou Padr\u00f5es de Projetos.\n\nO que s\u00e3o Design Patterns?\n\nDesign Patterns ou padr\u00f5es de projetos s\u00e3o solu\u00e7\u00f5es generalistas para problemas recorrentes durante o desenvolvimento de um software. N\u00e3o se trata de um framework ou um c\u00f3digo pronto, mas de uma defini\u00e7\u00e3o de alto n\u00edvel de como um problema comum pode ser solucionado.\n\nOrigem\n\nEm 1978 os arquitetos Christopher Alexander, Sara Ishikawa e Murray Silverstein escreveram um livro chamado \u201cA Pattern Language: Towns, Buildings, Construction\u201d que foi publicado em portugu\u00eas com o nome \u201cUma Linguagem de Padr\u00f5es\u201d. Neste livro os autores catalogaram 253 tipos de problemas (ou desafios de projeto) e analisaram o que est\u00e1 por tr\u00e1s de cada situa\u00e7\u00e3o, descrevendo-as na sua ess\u00eancia e propondo uma solu\u00e7\u00e3o padr\u00e3o.\n\nEm 1987 durante a segunda edi\u00e7\u00e3o da OOPSLA (Object-Oriented Programming, Systems, Languages, and Applications) o engenheiro de software Kent Back, que posteriormente foi um dos criadores das metodologias Extreme Programming e Test Driven Development (TDD), junto com Ward Cunningham apresentaram uma palestra intitulada \u201cUsing Pattern Languages for Object-Oriented Programs\u201d (Utilizando a linguagem dos padr\u00f5es para programa\u00e7\u00e3o orientada a objetos, em tradu\u00e7\u00e3o livre). Nesta palestra eles propuseram cinco padr\u00f5es de projetos no campo da ci\u00eancia da computa\u00e7\u00e3o.\n\nMas esses conceitos ficaram realmente conhecidos em 1994, quando os engenheiros de software Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides escreveram o livro \u201cDesign Patterns: Elements of Reusable Object-Oriented Software\u201d com o objetivo de catalogar problemas comuns aos projetos de desenvolvimento de software e as formas de resolver esses problemas. Os autores catalogaram 23 padr\u00f5es que utilizaram ao longo de suas carreiras. Este livro teve mais 500.000 exemplares vendidos e foi publicado em 13 idiomas. No Brasil foi publicado com o nome \u201cPadr\u00f5es de Projeto \u2013 Solu\u00e7\u00f5es Reutiliz\u00e1veis de Software Orientado a Objetos\u201d. Os autores do livro ficaram conhecidos como Gang of Four (Gangue dos quatro) ou \u201cGoF\u201d. Depois disso muitos outros livros surgiram, alguns criticando alguns desses padr\u00f5es, e outros divulgando novos padr\u00f5es.\n\nDesde ent\u00e3o, Design Patterns tem sido um tema bastante estudado por programadores e arquitetos de software pelo mundo todo.\n\nQuais os benef\u00edcios de usar Design Patterns?\n\nDesign patterns s\u00e3o modelos que j\u00e1 foram utilizados e testados anteriormente, portanto podem representar um bom ganho de produtividade para os desenvolvedores.\n\nSeu uso tamb\u00e9m contribui para a organiza\u00e7\u00e3o e manuten\u00e7\u00e3o de projetos, j\u00e1 que esses padr\u00f5es se baseiam em baixo acoplamento entre as classes e padroniza\u00e7\u00e3o do c\u00f3digo.\n\nAl\u00e9m disso, com a padroniza\u00e7\u00e3o dos termos, as discuss\u00f5es t\u00e9cnicas s\u00e3o facilitadas. \u00c9 mais f\u00e1cil falar o nome de um design pattern em vez de ter que explicar todo o seu comportamento.\n\nDesign Patterns mais conhecidos\n\nOs padr\u00f5es do GoF s\u00e3o os mais conhecidos, por\u00e9m existe uma s\u00e9rie de outros padr\u00f5es catalogados. Neste artigo procurei citar os padr\u00f5es de projeto mais conhecidos e que s\u00e3o considerados como boas pr\u00e1ticas pelo mercado.\n\nPor vezes alguns padr\u00f5es deixam de ser utilizados devido a evolu\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o e a utiliza\u00e7\u00e3o de novos padr\u00f5es que melhor atendem alguns cen\u00e1rios. Um exemplo disso \u00e9 o padr\u00e3o Service Locator, que acabou caindo em desuso devido aos padr\u00f5es Dependency Injection e Inversion of Control, que juntos conseguem desacoplar as depend\u00eancias de uma forma mais organizada que o Service Locator.\n\nDesign Patterns GoF\n\nOs autores do livro \u201cDesign Patterns: Elements of Reusable Object-Oriented Software\u201d agruparam os Design Patterns em tr\u00eas tipos diferentes: Creational (Cria\u00e7\u00e3o), Structural (Estrutura), Behavioral (Comportamental).\n\nCreational Design Patterns\n\n* Abstract Factory\n* Builder\n* Factory Method\n* Prototype\n* Singleton\n\nStructural Design Patterns\n\n* Adapter\n* Bridge\n* Composite\n* Decorator\n* Fa\u00e7ade\n* Flyweight\n* Proxy\n\nBehavioral Patterns\n\n* Chain of Responsibility\n* Command\n* Interpreter\n* Iterator\n* Mediator\n* Memento\n* Observer\n* State\n* Strategy\n* Template Method\n* Visitor\n\nPadr\u00f5es arquiteturais\n\n* Interceptor\n* Model View Controler (MVC)\n* Model View ViewModel (MVVM)\n* Model View Presenter (MVP)\n* n-tier\n* Specification\n* Publish\u2013subscribe\n* Inversion of control\n\nOutros Design Patterns\n\n* Rules Design Patterns\n* Dependency Injection\n* Intercepting filter\n* Lazy loading\n* Mock object\n* Method chaining\n* Inversion of control\n* Unit of Work\n\nConclus\u00e3o\n\nConhecer Design Patterns \u00e9 algo de extrema import\u00e2ncia no desenvolvimento de qualquer software. A utiliza\u00e7\u00e3o desses padr\u00f5es nos ajuda a desenvolver de forma mais r\u00e1pida frente a desafios semelhantes, fornece uma linguagem comum durante a documenta\u00e7\u00e3o e discuss\u00f5es t\u00e9cnicas al\u00e9m de nos auxiliar a organizar o c\u00f3digo fonte do software que estamos desenvolvendo.\n\nCompartilhe\n\n* Compartilhe pelo Facebook\n* Compartilhe pelo Twitter\n* Compartilhe pelo Linkedin\n* Compartilhe pelo Email\n* Share on Whatsapp\n\nhttps://www.opus-software.com.br/wp-content/uploads/2018/09/design-patterns.jpg 600 1000 lutti /wp-content/uploads/2019/01/opus_logo.png lutti2018-09-26 16:57:212019-05-17 15:08:50Design Patterns - O que s\u00e3o e quais os benef\u00edcios?\n\nfique atualizado\n\nAssine nossa newsletter e acompanhe as nossas novidades.\n\nOpus Software\nWe make IT easier!\n\n(11) 3816-2200\n(11) 99668-7273\n\nRua Butant\u00e3, 500\n2\u00ba andar\nS\u00e3o Paulo - SP\n05424-000\n\n99 Yorkville Ave\nToronto, ON\nM5R 1C1\n\n\u00a9 2019 Opus Software. Todos os direitos reservados. All rights reserved.\n\nDesenvolvedores contra taxas cobradas por Apple e Google Arquitetura de microsservi\u00e7os \u2013 Quais camadas a comp\u00f5e e como \u00e9 seu...\n\nScroll to top",
    "type": "article",
    "url": "https://www.opus-software.com.br/design-patterns/"
}