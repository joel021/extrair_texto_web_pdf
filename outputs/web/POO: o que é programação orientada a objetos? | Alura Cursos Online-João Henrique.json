{
    "title": "POO: o que é programação orientada a objetos? | Alura Cursos Online",
    "author": "João Henrique",
    "body": "POO: o que \u00e9 programa\u00e7\u00e3o orientada a objetos? | Alura Cursos Online\n\nEntrarMatricule-se\n\nTodos osCursos\n\nForma\u00e7\u00f5esParaEmpresasComoFunciona\n\n*\nMobile\n\n*\nPrograma\u00e7\u00e3o\n\n*\nFront-end\n\n*\nInfra\n\n*\nDesign & UX\n\n*\nMarketing Digital\n\n*\nData Science\n\n*\nInova\u00e7\u00e3o & Gest\u00e3o\n\nArtigos de Tecnologia e Neg\u00f3cios>Programa\u00e7\u00e3o\n\nPOO: o que \u00e9 programa\u00e7\u00e3o orientada a objetos?\n\nJo\u00e3o Henrique\n\n23/10/2019\n\nForma\u00e7\u00e3o Java\n\nPrograma\u00e7\u00e3o orientada a objetos e programa\u00e7\u00e3o estruturada\n\nComo a maioria das atividades que fazemos no dia a dia, programar tamb\u00e9m possui modos diferentes de se fazer. Esses modos s\u00e3o chamados de paradigmas de programa\u00e7\u00e3o e, entre eles, est\u00e3o a programa\u00e7\u00e3o orientada a objetos (POO) e a programa\u00e7\u00e3o estruturada. Quando come\u00e7amos a utilizar linguagens como Java, C#, Python e outras que possibilitam o paradigma orientado a objetos, \u00e9 comum errarmos e aplicarmos a programa\u00e7\u00e3o estruturada achando que estamos usando recursos da orienta\u00e7\u00e3o a objetos.\n\nNa programa\u00e7\u00e3o estruturada, um programa \u00e9 composto por tr\u00eas tipos b\u00e1sicos de estruturas:\n\n* sequ\u00eancias: s\u00e3o os comandos a serem executados\n* condi\u00e7\u00f5es: sequ\u00eancias que s\u00f3 devem ser executadas se uma condi\u00e7\u00e3o for satisfeita (exemplos:\nif-else\n\n,\nswitch\n\ne comandos parecidos)\n* repeti\u00e7\u00f5es: sequ\u00eancias que devem ser executadas repetidamente at\u00e9 uma condi\u00e7\u00e3o for satisfeita (\nfor\n\n,\nwhile\n\n,\ndo-while\n\netc)\n\nEssas estruturas s\u00e3o usadas para processar a entrada do programa, alterando os dados at\u00e9 que a sa\u00edda esperada seja gerada. At\u00e9 a\u00ed, nada que a programa\u00e7\u00e3o orientada a objetos n\u00e3o fa\u00e7a, tamb\u00e9m, certo?\n\nA diferen\u00e7a principal \u00e9 que na programa\u00e7\u00e3o estruturada, um programa \u00e9 tipicamente escrito em uma \u00fanica rotina (ou fun\u00e7\u00e3o) podendo, \u00e9 claro, ser quebrado em subrotinas. Mas o fluxo do programa continua o mesmo, como se pud\u00e9ssemos copiar e colar o c\u00f3digo das subrotinas diretamente nas rotinas que as chamam, de tal forma que, no final, s\u00f3 haja uma grande rotina que execute todo o programa.\n\nAl\u00e9m disso, o acesso \u00e0s vari\u00e1veis n\u00e3o possuem muitas restri\u00e7\u00f5es na programa\u00e7\u00e3o estruturada. Em linguagens fortemente baseadas nesse paradigma, restringir o acesso \u00e0 uma vari\u00e1vel se limita a dizer se ela \u00e9 vis\u00edvel ou n\u00e3o dentro de uma fun\u00e7\u00e3o (ou m\u00f3dulo, como no uso da palavra-chave\nstatic\n\n, na linguagem C), mas n\u00e3o se consegue dizer de forma nativa que uma vari\u00e1vel pode ser acessada por apenas algumas rotinas do programa. O contorno para situa\u00e7\u00f5es como essas envolve pr\u00e1ticas de programa\u00e7\u00e3o danosas ao desenvolvimento do sistema, como o uso excessivo de vari\u00e1veis globais. Vale lembrar que vari\u00e1veis globais s\u00e3o usadas tipicamente para manter estados no programa, marcando em qual parte dele a execu\u00e7\u00e3o se encontra.\n\nA programa\u00e7\u00e3o orientada a objetos surgiu como uma alternativa a essas caracter\u00edsticas da programa\u00e7\u00e3o estruturada. O intuito da sua cria\u00e7\u00e3o tamb\u00e9m foi o de aproximar o manuseio das estruturas de um programa ao manuseio das coisas do mundo real, da\u00ed o nome \"objeto\" como uma algo gen\u00e9rico, que pode representar qualquer coisa tang\u00edvel.\n\nEsse novo paradigma se baseia principalmente em dois conceitos chave: classes e objetos. Todos os outros conceitos, igualmente importantes, s\u00e3o constru\u00eddos em cima desses dois.\n\nO que s\u00e3o classes e objetos?\n\nImagine que voc\u00ea comprou um carro recentemente e decide modelar esse carro usando programa\u00e7\u00e3o orientada a objetos. O seu carro tem as caracter\u00edsticas que voc\u00ea estava procurando: um motor 2.0 h\u00edbrido, azul escuro, quatro portas, c\u00e2mbio autom\u00e1tico etc. Ele tamb\u00e9m possui comportamentos que, provavelmente, foram o motivo de sua compra, como acelerar, desacelerar, acender os far\u00f3is, buzinar e tocar m\u00fasica. Podemos dizer que o carro novo \u00e9 um objeto, onde suas caracter\u00edsticas s\u00e3o seus atributos (dados atrelados ao objeto) e seus comportamentos s\u00e3o a\u00e7\u00f5es ou m\u00e9todos.\n\nSeu carro \u00e9 um objeto seu mas na loja onde voc\u00ea o comprou existiam v\u00e1rios outros, muito similares, com quatro rodas, volante, c\u00e2mbio, retrovisores, far\u00f3is, dentre outras partes. Observe que, apesar do seu carro ser \u00fanico (por exemplo, possui um registro \u00fanico no Departamento de Tr\u00e2nsito), podem existir outros com exatamente os mesmos atributos, ou parecidos, ou mesmo totalmente diferentes, mas que ainda s\u00e3o considerados carros. Podemos dizer ent\u00e3o que seu objeto pode ser classificado (isto \u00e9, seu objeto pertence \u00e0 uma classe) como um carro, e que seu carro nada mais \u00e9 que uma inst\u00e2ncia dessa classe chamada \"carro\".\n\nAssim, abstraindo um pouco a analogia, uma classe \u00e9 um conjunto de caracter\u00edsticas e comportamentos que definem o conjunto de objetos pertencentes \u00e0 essa classe. Repare que a classe em si \u00e9 um conceito abstrato, como um molde, que se torna concreto e palp\u00e1vel atrav\u00e9s da cria\u00e7\u00e3o de um objeto. Chamamos essa cria\u00e7\u00e3o de instancia\u00e7\u00e3o da classe, como se estiv\u00e9ssemos usando esse molde (classe) para criar um objeto.\n\nExemplo em Java\n\npublic class Carro {\nDouble velocidade;\nString modelo;\n\npublic Carro(String modelo) {\nthis.modelo = modelo;\nthis.velocidade = 0;\n}\n\npublic void acelerar() {\n/* c\u00f3digo do carro para acelerar */\n}\n\npublic void frear() {\n/* c\u00f3digo do carro para frear */\n}\n\npublic void acenderFarol() {\n/* c\u00f3digo do carro para acender o farol */\n}\n}\n\nExemplo em Python\n\nclass Carro:\ndef __init__(self, modelo):\nself.modelo = modelo;\nself.velocidade = 0\n\ndef acelerar(self):\n# Codigo para acelerar o carro\n\ndef frear(self):\n# Codigo para frear o carro\n\ndef acenderFarol(self):\n# Codigo para acender o farol do carro\n\nEncapsulamento, heran\u00e7a e polimorfismo: as principais caracter\u00edsticas da POO\n\nAs duas bases da POO s\u00e3o os conceitos de classe e objeto. Desses conceitos, derivam alguns outros conceitos extremamente importantes ao paradigma, que n\u00e3o s\u00f3 o definem como s\u00e3o as solu\u00e7\u00f5es de alguns problemas da programa\u00e7\u00e3o estruturada. Os conceitos em quest\u00e3o s\u00e3o o encapsulamento, a heran\u00e7a, as interfaces e o polimorfismo.\n\nEncapsulamento\n\nAinda usando a analogia do carro, sabemos que ele possui atributos e m\u00e9todos, ou seja, caracter\u00edsticas e comportamentos. Os m\u00e9todos do carro, como acelerar, podem usar atributos e outros m\u00e9todos do carro como o tanque de gasolina e o mecanismo de inje\u00e7\u00e3o de combust\u00edvel, respectivamente, uma vez que acelerar gasta combust\u00edvel.\n\nNo entanto, se alguns desses atributos ou m\u00e9todos forem facilmente vis\u00edveis e modific\u00e1veis, como o mecanismo de acelera\u00e7\u00e3o do carro, isso pode dar liberdade para que altera\u00e7\u00f5es sejam feitas, resultando em efeitos colaterais imprevis\u00edveis. Nessa analogia, uma pessoa pode n\u00e3o estar satisfeita com a acelera\u00e7\u00e3o do carro e modifica a forma como ela ocorre, criando efeitos colaterais que podem fazer o carro nem andar, por exemplo.\n\nDizemos, nesse caso, que o m\u00e9todo de acelera\u00e7\u00e3o do seu carro n\u00e3o \u00e9 vis\u00edvel por fora do pr\u00f3prio carro. Na POO, um atributo ou m\u00e9todo que n\u00e3o \u00e9 vis\u00edvel de fora do pr\u00f3prio objeto \u00e9 chamado de \"privado\" e quando \u00e9 vis\u00edvel, \u00e9 chamado de \"p\u00fablico\".\n\nMas ent\u00e3o, como sabemos como o nosso carro acelera? \u00c9 simples: n\u00e3o sabemos. N\u00f3s s\u00f3 sabemos que para acelerar, devemos pisar no acelerador e de resto o objeto sabe como executar essa a\u00e7\u00e3o sem expor como o faz. Dizemos que a acelera\u00e7\u00e3o do carro est\u00e1 encapsulada, pois sabemos o que ele vai fazer ao executarmos esse m\u00e9todo, mas n\u00e3o sabemos como - e na verdade, n\u00e3o importa para o programa como o objeto o faz, s\u00f3 que ele o fa\u00e7a.\n\nO mesmo vale para atributos. Por exemplo: n\u00e3o sabemos como o carro sabe qual velocidade mostrar no veloc\u00edmetro ou como ele calcula sua velocidade, mas n\u00e3o precisamos saber como isso \u00e9 feito. S\u00f3 precisamos saber que ele vai nos dar a velocidade certa. Ler ou alterar um atributo encapsulado pode ser feito a partir de getters e setters (colocar refer\u00eancia).\n\nEsse encapsulamento de atributos e m\u00e9todos impede o chamado vazamento de escopo, onde um atributo ou m\u00e9todo \u00e9 vis\u00edvel por algu\u00e9m que n\u00e3o deveria v\u00ea-lo, como outro objeto ou classe. Isso evita a confus\u00e3o do uso de vari\u00e1veis globais no programa, deixando mais f\u00e1cil de identificar em qual estado cada vari\u00e1vel vai estar a cada momento do programa, j\u00e1 que a restri\u00e7\u00e3o de acesso nos permite identificar quem consegue modific\u00e1-la.\n\nExemplo em Java\n\npublic class Carro {\nprivate Double velocidade;\nprivate String modelo;\nprivate MecanismoAceleracao mecanismoAceleracao;\nprivate String cor;\n\n/* Repare que o mecanismo de acelera\u00e7\u00e3o \u00e9 inserido no carro ao ser constru\u00eddo, e\nn\u00e3o o vemos nem podemos modific\u00e1-lo, isto \u00e9, n\u00e3o tem getter nem setter.\nJ\u00e1 o \"modelo\" pode ser visto, mas n\u00e3o alterado. */\npublic Carro(String modelo, MecanismoAceleracao mecanismoAceleracao) {\nthis.modelo = modelo;\nthis.mecanismoAceleracao = mecanismoAceleracao;\nthis.velocidade = 0;\n}\n\npublic void acelerar() {\nthis.mecanismoAceleracao.acelerar();\n}\n\npublic void frear() {\n/* c\u00f3digo do carro para frear */\n}\n\npublic void acenderFarol() {\n/* c\u00f3digo do carro para acender o farol */\n}\n\npublic Double getVelocidade() {\nreturn this.velocidade\n}\n\nprivate void setVelocidade() {\n/* c\u00f3digo para alterar a velocidade do carro */\n/* Como s\u00f3 o pr\u00f3prio carro deve calcular a velocidade,\nesse m\u00e9todo n\u00e3o pode ser chamado de fora, por isso \u00e9 \"private\" */\n}\n\npublic String getModelo() {\nreturn this.modelo;\n}\n\npublic String getCor() {\nreturn this.cor;\n}\n\n/* podemos mudar a cor do carro quando quisermos */\npublic void setCor(String cor) {\nthis.cor = cor;\n}\n}\n\nExemplo em Python\n\n# Exemplo da classe Carro em Python\nclass Carro:\ndef __init__(self, modelo, mecanismoAceleracao):\nself.__modelo = modelo;\nself.__velocidade = 0\nself.__mecanismoAceleracao = mecanismoAceleracao\n\ndef acelerar(self):\nmecanismoAceleracao.acelerar()\n\ndef frear(self):\n# Codigo para frear o carro\n\ndef acenderFarol(self):\n# Codigo para acender o farol do carro\n\ndef getVelocidade(self):\nreturn self.velocidade\n\ndef __setVelocidade(self):\n# Codigo para alterar a velocidade por dentro do objeto\n\ndef getModelo(self):\nreturn self.modelo\n\ndef getCor(self):\nreturn self.cor\n\ndef setCor(self, cor):\nself.cor = cor\n\nHeran\u00e7a\n\nNo nosso exemplo, voc\u00ea acabou de comprar um carro com os atributos que procurava. Apesar de ser \u00fanico, existem carros com exatamente os mesmos atributos ou formas modificadas. Digamos que voc\u00ea tenha comprado o modelo Fit, da Honda. Esse modelo possui uma outra vers\u00e3o, chamada WR-V (ou \"Honda Fit Cross Style\"), que possui muitos dos atributos da vers\u00e3o cl\u00e1ssica, mas com algumas diferen\u00e7as bem grandes para transitar em estradas de terra: o motor \u00e9 h\u00edbrido (aceita \u00e1lcool e gasolina), possui um sistema de suspens\u00e3o diferente, e vamos supor que al\u00e9m disso ele tenha um sistema de tra\u00e7\u00e3o diferente (tra\u00e7\u00e3o nas quatro rodas, por exemplo). Vemos ent\u00e3o que n\u00e3o s\u00f3 alguns atributos como tambm alguns mecanismos (ou m\u00e9todos, traduzindo para POO) mudam, mas essa vers\u00e3o \"cross\" ainda \u00e9 do modelo Honda Fit, ou melhor, \u00e9 um tipo do modelo.\n\nQuando dizemos que uma classe A \u00e9 um tipo de classe B, dizemos que a classe A herda as caracter\u00edsticas da classe B e que a classe B \u00e9 m\u00e3e da classe A, estabelecendo ent\u00e3o uma rela\u00e7\u00e3o de heran\u00e7a entre elas. No caso do carro, dizemos ent\u00e3o que um Honda Fit \"Cross\" \u00e9 um tipo de Honda Fit, e o que muda s\u00e3o alguns atributos (paralama refor\u00e7ado, altura da suspens\u00e3o etc), e um dos m\u00e9todos da classe (acelerar, pois agora h\u00e1 tra\u00e7\u00e3o nas quatro rodas), mas todo o resto permanece o mesmo, e o novo modelo recebe os mesmos atributos e m\u00e9todos do modelo cl\u00e1ssico.\n\nExemplo em Java\n\n// \"extends\" estabelece a rela\u00e7\u00e3o de heran\u00e7a dom a classe Carro\npublic class HondaFit extends Carro {\n\npublic HondaFit(MecanismoAceleracao mecanismoAceleracao) {\nString modelo = \"Honda Fit\";\n// chama o construtor da classe m\u00e3e, ou seja, da classe \"Carro\"\nsuper(modelo, mecanismoAceleracao);\n}\n}\n\nExemplo em Python\n\n# As classes dentro do par\u00eanteses s\u00e3o as classes m\u00e3e da classe sendo definida\nclass HondaFit(Carro):\n\ndef __init__(self, mecanismoAceleracao):\nmodelo = \"Honda Fit\"\n# chama o construtor da classe m\u00e3e, ou seja, da classe \"Carro\"\nsuper().__init__(self, modelo, mecanismoAceleracao)\n\nInterface\n\nMuitos dos m\u00e9todos dos carros s\u00e3o comuns em v\u00e1rios autom\u00f3veis. Tanto um carro quanto uma motocicleta s\u00e3o classes cujos objetos podem acelerar, parar, acender o farol etc, pois s\u00e3o coisas comuns a autom\u00f3veis. Podemos dizer, ent\u00e3o, que ambas as classes \"carro\" e \"motocicleta\" s\u00e3o \"autom\u00f3veis\".\n\nQuando duas (ou mais) classes possuem comportamentos comuns que podem ser separados em uma outra classe, dizemos que a \"classe comum\" \u00e9 uma interface, que pode ser \"herdada\" pelas outras classes. Note que colocamos a interface como \"classe comum\", que pode ser \"herdada\" (com aspas), porque uma interface n\u00e3o \u00e9 exatamente um classe, mas sim um conjunto de m\u00e9todos que todas as classes que herdarem dela devem possuir (implementar) - portanto, uma interface n\u00e3o \u00e9 \"herdada\" por uma classe, mas sim implementada. No mundo do desenvolvimento de software, dizemos que uma interface \u00e9 um \"contrato\": uma classe que implementa uma interface deve fornecer uma implementa\u00e7\u00e3o a todos os m\u00e9todos que a interface define, e em compensa\u00e7\u00e3o, a classe implementadora pode dizer que ela \u00e9 do tipo da interface. No nosso exemplo, \"carro\" e \"motocicleta\" s\u00e3o classes que implementam os m\u00e9todos da interface \"autom\u00f3vel\", logo podemos dizer que qualquer objeto dessas duas primeiras classes, como um Honda Fit ou uma motocicleta da Yamaha, s\u00e3o autom\u00f3veis.\n\nUm pequeno detalhe: uma interface n\u00e3o pode ser herdada por uma classe, mas sim implementada. No entanto, uma interface pode herdar de outra interface, criando uma hierarquia de interfaces. Usando um exemplo completo com carros, dizemos que a classe \"Honda Fit Cross\" herda da classe \"Honda Fit\", que por sua vez herda da classe \"Carro\". A classe \"Carro\" implementa a interface \"Autom\u00f3vel\" que, por sua vez, pode herdar (por exemplo) uma interface chamada \"MeioDeTransporte\", uma vez que tanto um \"autom\u00f3vel\" quanto uma \"carro\u00e7a\" s\u00e3o meios de transporte, ainda que uma carro\u00e7a n\u00e3o seja um autom\u00f3vel.\n\nExemplo em Java\n\npublic interface Automovel {\nvoid acelerar();\nvoid frear();\nvoid acenderFarol();\n}\n\npublic class Carro implements Automovel {\n\n/* ... */\n\n@Override\npublic void acelerar() {\nthis.mecanismoAceleracao.acelerar();\n}\n\n@Override\npublic void frear() {\n/* c\u00f3digo do carro para frear */\n}\n\n@Override\npublic void acenderFarol() {\n/* c\u00f3digo do carro para acender o farol */\n}\n\n/* ... */\n}\n\npublic class Moto implements Automovel {\n\n/* ... */\n\n@Override\npublic void acelerar() {\n/* c\u00f3digo espec\u00edfico da moto para acelerar */\n}\n\n@Override\npublic void frear() {\n/* c\u00f3digo espec\u00edfico da moto para frear */\n}\n\n@Override\npublic void acenderFarol() {\n/* c\u00f3digo espec\u00edfico da moto para acender o farol */\n}\n\n/* ... */\n}\n\nExemplo em Python\n\nclass Automovel():\ndef acelerar(self):\nraise NotImplementedError()\n\ndef frear(self):\nraise NotImplementedError()\n\ndef acenderFarol(self):\nraise NotImplementedError()\n\nclass Carro(Automovel):\n\n# ...\n\ndef acelerar(self):\n# Codigo para acelerar o carro\n\ndef frear(self):\n# Codigo para frear o carro\n\ndef acenderFarol(self):\n# Codigo para acender o farol do carro\n\n# ...\n\nclass Moto(Automovel):\n\n# ...\n\ndef acelerar(self):\n# Codigo para acelerar a moto\n\ndef frear(self):\n# Codigo para frear a moto\n\ndef acenderFarol(self):\n# Codigo para acender a moto\n\n# ...\n\nNota: criar um erro do tipo\nNotImplementedError\n\n\u00e9 apenas uma conve\u00e7\u00e3o para que, caso uma classe filha tente executar um m\u00e9todo da classe m\u00e3e sem t\u00ea-la implementado, ocorra o erro. Em Python, as interfaces s\u00e3o criadas como classes normais que s\u00e3o herdadas pelas classes filhas. Existem formas de for\u00e7ar a implementa\u00e7\u00e3o por parte das classes filhas, mas para nosso exemplo essa abordagem \u00e9 suficiente.\n\nPolimorfismo\n\nVamos dizer que um dos motivos de voc\u00ea ter comprado um carro foi a qualidade do sistema de som dele. Mas, no seu caso, digamos que a reprodu\u00e7\u00e3o s\u00f3 pode ser feita via r\u00e1dio ou bluetooth, enquanto que no seu antigo carro, podia ser feita apenas via cart\u00e3o SD e pendrive. Em ambos os carros est\u00e1 presente o m\u00e9todo \"tocar m\u00fasica\" mas, como o sistema de som deles \u00e9 diferente, a forma como o carro toca as m\u00fasicas \u00e9 diferente. Dizemos que o m\u00e9todo \"tocar m\u00fasica\" \u00e9 uma forma de polimorfismo, pois dois objetos, de duas classes diferentes, t\u00eam um mesmo m\u00e9todo que \u00e9 implementado de formas diferentes, ou seja, um m\u00e9todo possui v\u00e1rias formas, v\u00e1rias implementa\u00e7\u00f5es diferentes em classes diferentes, mas que possuem o mesmo efeito (\"polimorfismo\" vem do grego poli = muitas, morphos = forma).\n\nExemplo em Java\n\npublic class Main {\npublic static void main(String[] args) {\nAutomovel moto = new Moto(\"Yamaha XPTO-100\", new MecanismoDeAceleracaoDeMotos())\nAutomovel carro = new Carro(\"Honda Fit\", new MecanismoDeAceleracaoDeCarros())\nList<Automovel> listaAutomoveis = Arrays.asList(moto, carro);\nfor (Automovel automovel : listaAutomoveis) {\nautomovel.acelerar();\nautomovel.acenderFarol();\n}\n}\n}\n\nExemplo em Python\n\ndef main():\nmoto = Moto(\"Yahama XPTO-100\", MecanismoDeAceleracaoDeMotos())\ncarro = Carro(\"Honda Fit\", MecanismoDeAceleracaoDeCarros())\nlistaAutomoveis = [moto, carro]\nfor automovel in listaAutomoveis:\nautomovel.acelerar()\nautomovel.acenderFarol()\n\nRepare que apesar de serem objetos diferentes,\nmoto\n\ne\ncarro\n\npossuem os mesmos m\u00e9todos\nacelerar\n\ne\nacenderFarol\n\n, que s\u00e3o chamados da mesma forma, apesar de serem implementados de maneira diferente.\n\nDesign Patterns\n\nAlguns problemas aparecem com tanta frequ\u00eancia em POO que suas solu\u00e7\u00f5es se tornaram padr\u00f5es de design de sistemas e modelagem de c\u00f3digo orientado a objeto, a fim de resolv\u00ea-los. Esses padr\u00f5es de projeto, (ou design patterns) nada mais s\u00e3o do que formas padronizadas de resolver problemas comuns em linguagens orientadas a objetos. O livro \"Design Patterns\", conhecido como Gof:Gang of Four, \u00e9 a principal refer\u00eancia nesse assunto, contendo os principais padr\u00f5es usados em grandes projetos. A Alura tamb\u00e9m oferece cursos de Design Patterns em linguagens de programa\u00e7\u00e3o como Java, Python e C#.\n\nClean code e SOLID\n\nEm projetos desenvolvidos com POO, assim como em qualquer outro, o cdigo pode se tornar desorganizado e dificil de manter a m\u00e9dio e longo prazo. Em vista dessa situa\u00e7\u00e3o, alguns princ\u00edpios de boas pr\u00e1ticas de programa\u00e7\u00e3o e c\u00f3digo limpo foram desenvolvidos como, por exemplo:\n\n* KISS (Keep It Simple, Stupid, \"Mantenha as coisas simples\"): Sempre que um c\u00f3digo for escrito, ele deve ser escrito da forma mais simples poss\u00edvel, para manter o c\u00f3digo mais leg\u00edvel. C\u00f3digos complexos demais s\u00e3o mais dif\u00edceis de se manter, j que \u00e9 mais dif\u00edcil entender o que ele faz e como ele faz.\n* DRY (Don't Repeat Yourself, \"N\u00e3o se repita\"): Todo c\u00f3digo escrito para resolver um problema deve ser escrito apenas uma vez, a fim de evitar repeti\u00e7\u00e3o de c\u00f3digo. \u00c9 quase uma varia\u00e7\u00e3o do KISS, dado que a repeti\u00e7\u00e3o de c\u00f3digo o torna mais confuso e dif\u00edcil de manter e corrigir, se necess\u00e1rio.\n\nAlguns cursos da Alura abordam esses assuntos, como o curso de SOLID com Java, SOLID com PHP, e tamb\u00e9m nosso artigo sobre o que \u00e9 Clean Code.\n\nAl\u00e9m dos design patterns e dos princ\u00edpios de c\u00f3digo limpo existe um conjunto de t\u00e9cnicas, mais generalizadas que os design patterns, que ajudam a criar c\u00f3digo orientado a objeto de forma a deix\u00e1-lo mais male\u00e1vel, possibilitando uma manuten\u00e7\u00e3o e expans\u00e3o mais suave e descomplicada do c\u00f3digo ao longo do tempo.\n\nNo blog da Caelum, voc\u00ea tamb\u00e9m pode ver sobre os grandes erros da orienta\u00e7\u00e3o a objetos, como o uso de heran\u00e7a de maneira excessiva e a cria\u00e7\u00e3o de getters e setters sem necessidade. H\u00e1 tamb\u00e9m o cap\u00edtulo de Arquitetura Java que fala sobre interface e implementa\u00e7\u00e3o.\n\nLeia tamb\u00e9m:\n\n* Diferen\u00e7a entre int e Integer em Java* Evite o NullPointerException no Java * IntelliJ IDEA para quem est\u00e1 come\u00e7ando* Criando anota\u00e7\u00f5es no Java * Aumentando a sua produtividade com o eclipse\n\nForma\u00e7\u00e3o Java\n\nCursos de Programa\u00e7\u00e3o\n\nArtigos de Tecnologia e Neg\u00f3cios>Programa\u00e7\u00e3o\n\nCursos profissionais de Programa\u00e7\u00e3o \u00e9 na Alura, comece agora!\n\n*\n1186 cursos\n\nCursos de programa\u00e7\u00e3o, UX, agilidade, data science, transforma\u00e7\u00e3o digital, mobile, front-end, marketing e infra.\n\n*\nCertificado de participa\u00e7\u00e3o\n\nCertificado de que assistiu o curso e finalizou as atividades\n\n*\nApp para Android e iPhone/iPad\n\nEstude at\u00e9 mesmo offline atrav\u00e9s das nossas apps Android e iOS em smartphones e tablets\n\n*\nProjeto avaliado pelos instrutores\n\nProjeto pr\u00e1ticos para entrega e avalia\u00e7\u00e3o dos professores da Alura com certificado de aprova\u00e7\u00e3o diferenciado\n\n*\nAcesso \u00e0 Alura Start\n\nCursos de introdu\u00e7\u00e3o a tecnologia atrav\u00e9s de games, apps e ci\u00eancia\n\n*\nAcesso \u00e0 Alura L\u00edngua\n\nRefor\u00e7o online de ingl\u00eas e espanhol para aprimorar seu conhecimento\n\nPremium\n\n*\n1186 cursos\n\nCursos de programa\u00e7\u00e3o, UX, agilidade, data science, transforma\u00e7\u00e3o digital, mobile, front-end, marketing e infra.\n\n*\nCertificado de participa\u00e7\u00e3o\n\nCertificado de que assistiu o curso e finalizou as atividades\n\n*\nApp para Android e iPhone/iPad\n\nEstude at\u00e9 mesmo offline atrav\u00e9s das nossas apps Android e iOS em smartphones e tablets\n\n*\nProjeto avaliado pelos instrutores\n\nProjeto pr\u00e1ticos para entrega e avalia\u00e7\u00e3o dos professores da Alura com certificado de aprova\u00e7\u00e3o diferenciado\n\n*\nAcesso \u00e0 Alura Start\n\nCursos de introdu\u00e7\u00e3o a tecnologia atrav\u00e9s de games, apps e ci\u00eancia\n\n*\nAcesso \u00e0 Alura L\u00edngua\n\nRefor\u00e7o online de ingl\u00eas e espanhol para aprimorar seu conhecimento\n\n12X\nR$75\n\n\u00e0 vistaR$900\n\nMatricule-se\n\nPremium Plus\n\n*\n1186 cursos\n\nCursos de programa\u00e7\u00e3o, UX, agilidade, data science, transforma\u00e7\u00e3o digital, mobile, front-end, marketing e infra.\n\n*\nCertificado de participa\u00e7\u00e3o\n\nCertificado de que assistiu o curso e finalizou as atividades\n\n*\nApp para Android e iPhone/iPad\n\nEstude at\u00e9 mesmo offline atrav\u00e9s das nossas apps Android e iOS em smartphones e tablets\n\n*\nProjeto avaliado pelos instrutores\n\nProjeto pr\u00e1ticos para entrega e avalia\u00e7\u00e3o dos professores da Alura com certificado de aprova\u00e7\u00e3o diferenciado\n\n*\nAcesso \u00e0 Alura Start\n\nCursos de introdu\u00e7\u00e3o a tecnologia atrav\u00e9s de games, apps e ci\u00eancia\n\n*\nAcesso \u00e0 Alura L\u00edngua\n\nRefor\u00e7o online de ingl\u00eas e espanhol para aprimorar seu conhecimento\n\n12X\nR$100\n\n\u00e0 vistaR$1.200\n\nMatricule-se\n\nMax\n\n*\n1186 cursos\n\nCursos de programa\u00e7\u00e3o, UX, agilidade, data science, transforma\u00e7\u00e3o digital, mobile, front-end, marketing e infra.\n\n*\nCertificado de participa\u00e7\u00e3o\n\nCertificado de que assistiu o curso e finalizou as atividades\n\n*\nApp para Android e iPhone/iPad\n\nEstude at\u00e9 mesmo offline atrav\u00e9s das nossas apps Android e iOS em smartphones e tablets\n\n*\nProjeto avaliado pelos instrutores\n\nProjeto pr\u00e1ticos para entrega e avalia\u00e7\u00e3o dos professores da Alura com certificado de aprova\u00e7\u00e3o diferenciado\n\n*\nAcesso \u00e0 Alura Start\n\nCursos de introdu\u00e7\u00e3o a tecnologia atrav\u00e9s de games, apps e ci\u00eancia\n\n*\nAcesso \u00e0 Alura L\u00edngua\n\nRefor\u00e7o online de ingl\u00eas e espanhol para aprimorar seu conhecimento\n\n12X\nR$120\n\n\u00e0 vistaR$1.440\n\nMatricule-se\n\nProcurando planos para empresas? \u2192\n\nAcesso por 1 ano\n\nEstude 24h/dia onde e quando quiser\n\nNovos cursos toda semana\n\n* Planos\n* Todos os cursos\n* Guias de empresas\n* Instrutores\n* Como virar instrutor\n* Artigos\n* Para Escolas\n* Imers\u00f5es\n* Pol\u00edtica de Privacidade\n* Termos de Uso\n* Sobre n\u00f3s\n* Perguntas frequentes\n\nReceba Novidades e Lan\u00e7amentos\n\nNossas redes e apps\n\nYouTubeFacebookTwitterPodcast Hipsters.techInstagram\n\nGoogle Play StoreAppStore\n\nFale Conosco\n\nD\u00favida, cr\u00edtica, sugest\u00e3o ou elogio?\n\nEntre em contato!\n\nEmpresa? Governo?\n\nPlanos corporativos para o seu time.\n\nSaiba mais\n\nPowered by\n\nAOVS Sistemas de Inform\u00e1tica S.ACNPJ 05.555.382/0001-33\n\nCursos\n\nCursos de Mobile\nFlutter, React NativeiOS e SwiftAndroid e KotlinJogos\n\nCursos de Programa\u00e7\u00e3o\nL\u00f3gicaPythonPHPJava.NETNode JSRuby & RailsCComputa\u00e7\u00e3oJogos\n\nCursos de Front-end\nHTML, CSSReactAngularJavaScriptjQuery\n\nCursos de Infraestrutura\nDevOps e GitCloudLinuxIoTRedes\n\nCursos de Design & UX\nPhotoshop e IllustratorUsabilidade e UXV\u00eddeo e Motion3D\n\nCursos de Marketing Digital\nAdsMarketingSEOE-commerceSocial MediaYouTube\n\nCursos de Data Science\nSQL e Banco de DadosNoSQLData ScienceMachine LearningBIEstat\u00edsticaExcel\n\nCursos de Inova\u00e7\u00e3o & Gest\u00e3o\nM\u00e9todos \u00c1geisSoftskillsLideran\u00e7a e Gest\u00e3oStartups e EmpreendedorismoVendas\n\nGrupo Caelum Alura\n\n*\nEduca\u00e7\u00e3o\n\n* Caelum\n* Casa do C\u00f3digo\n\n*\nEduca\u00e7\u00e3o Online\n\n* Alura\n* Alura Start\n* MusicDot\n* Alura L\u00edngua\n\n*\nComunidade\n\n* Hipsters ponto Tech\n* Hipsters ponto Jobs\n* GUJ",
    "type": "article",
    "url": "https://www.alura.com.br/artigos/poo-programacao-orientada-a-objetos"
}